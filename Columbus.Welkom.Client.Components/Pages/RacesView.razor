@page "/races"
@using Columbus.Welkom.Application.Models
@using Columbus.Welkom.Application.Services.Interfaces
@inject IRaceService RaceService
@inject NotificationService NotificationService

<RadzenStack AlignItems="AlignItems.Start" Orientation="Orientation.Vertical" Visible="_selectedRace is null">
    <RadzenText TextStyle="TextStyle.DisplayH6">
        Vluchten
    </RadzenText>

    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenButton Text="W-Bestanden"
                      ButtonStyle="ButtonStyle.Primary"
                      ButtonType="ButtonType.Button"
                      Icon="drive_folder_upload"
                      Click="ReadDirectory" />

        <RadzenButton Text="W-Bestand"
                      ButtonStyle="ButtonStyle.Secondary"
                      ButtonType="ButtonType.Button"
                      Icon="upload_file"
                      Click="ReadFile" />
    </RadzenStack>


    <RadzenDataGrid Data="_races" IsLoading="_isLoading" EmptyText="Geen vluchten gevonden.">
        <Columns>
            <RadzenDataGridColumn TItem="SimpleRace" Property="Code" Title="Code" />
            <RadzenDataGridColumn TItem="SimpleRace" Property="Name" Title="Naam" />
            <RadzenDataGridColumn TItem="SimpleRace" Title="Lostijd">
                <Template Context="race">
                    @race.StartTime.ToString("d-M-yyyy HH:mm:ss")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="SimpleRace" Title="Lengtegraad">
                <Template Context="race">
                    @Math.Round(race.Location.Longitude, 2)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="SimpleRace" Title="Breedtegraad">
                <Template Context="race">
                    @Math.Round(race.Location.Lattitude, 2)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="SimpleRace" Title="Leden">
                <Template Context="race">
                    @race.OwnerCount
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="SimpleRace" Title="Duiven">
                <Template Context="race">
                    @race.PigeonCount
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="SimpleRace" Width="90px">
                <Template Context="race">
                    <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="info" Click="(() => _selectedRace = race)" />
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Click="(() => DeleteRace(race))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenStack>

<DetailedRaceView Year="@(_selectedRace?.StartTime.Year ?? null)" Code="@(_selectedRace?.Code ?? null)" />

@code {
    [CascadingParameter(Name = "Club")]
    public int Club { get; set; }
    [CascadingParameter(Name = "Year")]
    public int Year { get; set; }

    private IEnumerable<SimpleRace> _races = null!;
    private SimpleRace? _selectedRace;
    private bool _isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _races = await RaceService.GetAllRacesAsync();
    }

    private async Task ReadDirectory()
    {
        _isLoading = true;

        try
        {
            IEnumerable<Race> races = await RaceService.ReadRacesFromDirectoryAsync(string.Empty);
            await RaceService.OverwriteRacesAsync(races);
            _races = await RaceService.GetAllRacesAsync();
        } catch (JSException)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Fout", "Bestand kon niet worden geladen.");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task ReadFile()
    {
        _isLoading = true;

        try
        {
            Race newRace = await RaceService.ReadRaceFromFileAsync(string.Empty);

            await RaceService.StoreRaceAsync(newRace);
            _races = await RaceService.GetAllRacesAsync();
        } catch (JSException)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Fout", "Bestand kon niet worden geladen.");
        } finally
        {
            _isLoading = false;
        }
    }

    private async Task DeleteRace(SimpleRace race)
    {
        await RaceService.DeleteRaceByCodeAsync(race.Code);
        _races = await RaceService.GetAllRacesAsync();
    }
}
