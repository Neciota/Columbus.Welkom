@page "/pigeon-sale"
@inject IOwnerService OwnerService
@inject IPigeonSaleService PigeonSaleService

<RadzenStack Orientation="Orientation.Vertical">
    <RadzenText TextStyle="TextStyle.DisplayH6">
        Duivenverkoop
    </RadzenText>

    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenButton ButtonStyle="ButtonStyle.Primary"
                      Text="Klassement toevoegen"
                      Icon="playlist_add"
                      Disabled="_isLoading"
                      Click="AddClassAsync" />
        <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                      Text="Exporteren"
                      Icon="file_save"
                      IsBusy="_isExporting"
                      Click="ExportAsync"
                      Disabled="_isLoading" />
    </RadzenStack>

    <RadzenText TextStyle="TextStyle.Body1" Visible="!_pigeonSaleClasses.Any() && !_isLoading">
        Er zijn geen verkoopklassementen aanwezig.
    </RadzenText>

    @foreach (PigeonSaleClass pigeonSaleClass in _pigeonSaleClasses)
    {
        <RadzenDataGrid Data="pigeonSaleClass.PigeonSales" @ref="_dataGridsByPigeonSaleClassId[pigeonSaleClass.Id]" IsLoading="_isLoading" EmptyText="Geen duivenverkopen gevonden.">
            <HeaderTemplate>
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenText TextStyle="TextStyle.Subtitle1" Visible="!IsEditing(pigeonSaleClass)">
                        @pigeonSaleClass.Name
                    </RadzenText>
                    <RadzenTextBox @bind-Value="pigeonSaleClass.Name" Visible="IsEditing(pigeonSaleClass)" Placeholder="Naam" />

                    <RadzenButton Icon="edit"
                                  ButtonStyle="ButtonStyle.Dark"
                                  Variant="Variant.Text"
                                  Visible="!IsEditing(pigeonSaleClass)"
                                  Click="() => _pigeonSaleClassToEdit = pigeonSaleClass" />
                    <RadzenButton Icon="save"
                                  ButtonStyle="ButtonStyle.Dark"
                                  Variant="Variant.Text"
                                  Visible="IsEditing(pigeonSaleClass)"
                                  Click="UpdateClassAsync" />
                    <RadzenButton Icon="delete"
                                  ButtonStyle="ButtonStyle.Dark"
                                  Variant="Variant.Text"
                                  Click="() => DeleteClassAsync(pigeonSaleClass)" />
                    <RadzenButton Icon="add"
                                  ButtonStyle="ButtonStyle.Dark"
                                  Variant="Variant.Text"
                                  Click="() => AddSaleToClassAsync(pigeonSaleClass)" />
                </RadzenStack>
            </HeaderTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="PigeonSale" Title="Verkoper">
                    <Template Context="pigeonSale">
                        @pigeonSale.Seller?.Name
                    </Template>
                    <EditTemplate Context="pigeonSale">
                        <RadzenDropDown Data="_allOwners"
                                        @bind-Value="pigeonSale.Seller"
                                        AllowFiltering="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        class="rz-w-100">
                            <Template Context="possibleOwner">
                                @((possibleOwner as Owner)!.Id) - @((possibleOwner as Owner)!.Name)
                            </Template>
                            <ValueTemplate Context="possibleOwner">
                                @((possibleOwner as Owner)!.Id) - @((possibleOwner as Owner)!.Name)
                            </ValueTemplate>
                        </RadzenDropDown>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PigeonSale" Title="Koper">
                    <Template Context="pigeonSale">
                        @pigeonSale.Buyer?.Name
                    </Template>
                    <EditTemplate Context="pigeonSale">
                        <RadzenDropDown Data="_allOwners"
                                        @bind-Value="pigeonSale.Buyer"
                                        AllowFiltering="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        class="rz-w-100">
                            <Template Context="possibleOwner">
                                @((possibleOwner as Owner)!.Id) - @((possibleOwner as Owner)!.Name)
                            </Template>
                            <ValueTemplate Context="possibleOwner">
                                @((possibleOwner as Owner)!.Id) - @((possibleOwner as Owner)!.Name)
                            </ValueTemplate>
                        </RadzenDropDown>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PigeonSale" Title="Duif">
                    <Template Context="pigeonSale">
                        @pigeonSale.Pigeon?.Id
                    </Template>
                    <EditTemplate Context="pigeonSale">
                        <RadzenDropDown Data="pigeonSale.Buyer?.Pigeons"
                                        @bind-Value="pigeonSale.Pigeon"
                                        AllowFiltering="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                        class="rz-w-100" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="PigeonSale" Title="Punten" Property="@nameof(PigeonSale.TotalPoints)" />
                <RadzenDataGridColumn TItem="PigeonSale" Width="120px" TextAlign="TextAlign.End">
                    <Template Context="pigeonSale">
                        <RadzenButton Icon="edit"
                                      ButtonStyle="ButtonStyle.Dark"
                                      Variant="Variant.Text"
                                      Click="() => EditPigeonSaleAsync(pigeonSaleClass, pigeonSale)" />
                        <RadzenButton Icon="delete"
                                      ButtonStyle="ButtonStyle.Dark"
                                      Variant="Variant.Text"
                                      Click="() => DeletePigeonSaleAsync(pigeonSaleClass, pigeonSale)" />

                    </Template>
                    <EditTemplate Context="pigeonSale">
                        <RadzenButton Icon="save"
                                      ButtonStyle="ButtonStyle.Dark"
                                      Variant="Variant.Text"
                                      Disabled="pigeonSale.Seller is null || pigeonSale.Buyer is null || pigeonSale.Pigeon is null"
                                      Click="() => SavePigeonSaleAsync(pigeonSaleClass, pigeonSale)" />
                        <RadzenButton ButtonStyle="ButtonStyle.Dark"
                                      Variant="Variant.Text"
                                      Icon="delete"
                                      Click="() => CancelAdd(pigeonSaleClass, pigeonSale)" />
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
            <Template Context="pigeonSale">
                <RacePointsOverview RacePoints="pigeonSale.RacePoints" />
            </Template>
        </RadzenDataGrid>
    }
</RadzenStack>

<RadzenRow AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Center" Visible="_isLoading">
    <RadzenProgressBarCircular Mode="ProgressBarMode.Indeterminate" ShowValue="false" Size="ProgressBarCircularSize.Large" />
</RadzenRow>

@code {
    [CascadingParameter(Name = "Club")]
    public int Club { get; set; }
    [CascadingParameter(Name = "Year")]
    public int Year { get; set; }

    private IEnumerable<Owner> _allOwners = [];
    private ICollection<PigeonSaleClass> _pigeonSaleClasses = [];
    private Dictionary<int, RadzenDataGrid<PigeonSale>> _dataGridsByPigeonSaleClassId = [];
    private PigeonSaleClass? _pigeonSaleClassToEdit = null;
    private bool _isLoading = false;
    private bool _isExporting = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _isLoading = true;

        await Task.Run(async () =>
        {
            _allOwners = await OwnerService.GetOwnersWithYearPigeonsAsync(Year);
            _pigeonSaleClasses = await PigeonSaleService.GetAllClassesAsync();
        });

        _isLoading = false;
    }

    private bool IsEditing(PigeonSaleClass pigeonSaleClass) => _pigeonSaleClassToEdit == pigeonSaleClass;

    private async Task AddClassAsync()
    {
        int newId = (_pigeonSaleClasses.MaxBy(psc => psc.Id)?.Id ?? 0) + 1;
        PigeonSaleClass newClass = new()
        {
            Id = newId,
            Name = string.Empty,
        };

        _pigeonSaleClasses.Add(newClass);
        await PigeonSaleService.AddClassAsync(newClass);
        _pigeonSaleClassToEdit = newClass;
    }

    private async Task AddSaleToClassAsync(PigeonSaleClass pigeonSaleClass)
    {
        await _dataGridsByPigeonSaleClassId[pigeonSaleClass.Id].InsertRow(new PigeonSale());
    }

    private async Task UpdateClassAsync()
    {
        if (_pigeonSaleClassToEdit is null)
            return;

        await PigeonSaleService.UpdateClassAsync(_pigeonSaleClassToEdit);
        _pigeonSaleClassToEdit = null;
    }

    private async Task DeleteClassAsync(PigeonSaleClass pigeonSaleClass)
    {
        _pigeonSaleClasses.Remove(pigeonSaleClass);
        await PigeonSaleService.DeleteClassAsync(pigeonSaleClass);
    }

    private async Task EditPigeonSaleAsync(PigeonSaleClass pigeonSaleClass, PigeonSale pigeonSale)
    {
        await _dataGridsByPigeonSaleClassId[pigeonSaleClass.Id].EditRow(pigeonSale);
    }

    private async Task DeletePigeonSaleAsync(PigeonSaleClass pigeonSaleClass, PigeonSale pigeonSale)
    {
        await Task.Run(async () =>
        {
            await PigeonSaleService.DeleteAsync(pigeonSale);
            _pigeonSaleClasses = await PigeonSaleService.GetAllClassesAsync();
        });
    }

    private void CancelAdd(PigeonSaleClass pigeonSaleClass, PigeonSale pigeonSale)
    {
        _dataGridsByPigeonSaleClassId[pigeonSaleClass.Id].CancelEditRow(pigeonSale);
    }

    private async Task SavePigeonSaleAsync(PigeonSaleClass pigeonSaleClass, PigeonSale pigeonSale)
    {
        await _dataGridsByPigeonSaleClassId[pigeonSaleClass.Id].UpdateRow(pigeonSale);
        await Task.Run(async () =>
        {
            await PigeonSaleService.UpdateAsync(pigeonSaleClass, pigeonSale);
            _pigeonSaleClasses = await PigeonSaleService.GetAllClassesAsync();
        });
    }

    private async Task ExportAsync()
    {
        _isExporting = true;

        await PigeonSaleService.ExportAsync(_pigeonSaleClasses);

        _isExporting = false;
    }
}