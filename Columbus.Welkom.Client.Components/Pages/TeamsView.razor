@page "/teams"
@using Columbus.Welkom.Application.Models
@using Columbus.Welkom.Application.Models.ViewModels
@using Columbus.Welkom.Application.Services.Interfaces
@inject IOwnerService OwnerService
@inject ITeamsService TeamsService

<RadzenStack AlignItems="AlignItems.Start" Orientation="Orientation.Vertical">
    <RadzenText TextStyle="TextStyle.DisplayH6">
        Ploegenspel
    </RadzenText>

    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenButton ButtonStyle="ButtonStyle.Primary"
                      Text="Ploeg Toevoegen"
                      Icon="playlist_add"
                      Disabled="_isLoading"
                      Click="AddTeam" />
        <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                      Text="Exporteren"
                      Icon="file_save"
                      IsBusy="_isExporting"
                      Click="ExportAsync"
                      Disabled="_isLoading" />
    </RadzenStack>

    <RadzenDataGrid Data="_teams" EmptyText="Geen ploegen gevonden." @ref="_teamsGrid" Visible="!_isLoading">
        <Columns>
            <RadzenDataGridColumn TItem="Team" Title="Puntentotaal" Property="@nameof(Team.TotalPoints)" Width="100px" OrderIndex="0" />
            @foreach (int position in Enumerable.Range(0, 5))
            {
                <RadzenDataGridColumn TItem="Team" Title="Lid" OrderIndex="position * 2 + 1">
                    <Template Context="team">
                        @team.TeamOwners.FirstOrDefault(to => to.Position == position)?.Owner?.Name
                    </Template>
                    <EditTemplate Context="team">
                        @{
                            TeamOwner? teamOwner = team.TeamOwners.FirstOrDefault(to => to.Position == position);
                        }
                        @if (teamOwner is not null)
                        {
                            <RadzenDropDown TValue="Owner"
                                            Data="UnassignedOwners"
                                            @bind-Value="teamOwner.Owner"
                                            AllowFiltering="true"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            class="rz-w-100">
                                <Template Context="possibleOwner">
                                    @((possibleOwner as Owner)!.Id) - @((possibleOwner as Owner)!.Name)
                                </Template>
                                <ValueTemplate Context="possibleOwner">
                                    @((possibleOwner as Owner)!.Id) - @((possibleOwner as Owner)!.Name)
                                </ValueTemplate>
                            </RadzenDropDown>
                        }
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Team" Title="Punten" Width="80px" OrderIndex="position * 2 + 2">
                    <Template Context="team">
                        @team.TeamOwners.FirstOrDefault(to => to.Position == position)?.Points
                    </Template>
                </RadzenDataGridColumn>
            }
            <RadzenDataGridColumn TItem="Team" Width="140px" TextAlign="TextAlign.End" OrderIndex="11">
                <Template Context="team">
                    <RadzenButton Icon="add"
                                  ButtonStyle="ButtonStyle.Dark"
                                  Variant="Variant.Text"
                                  Click="() => AddOwnerAsync(team)" />
                    <RadzenButton Icon="edit"
                                  ButtonStyle="ButtonStyle.Dark"
                                  Variant="Variant.Text"
                                  Click="() => EditTeamAsync(team)" />
                    <RadzenButton Icon="delete"
                                  ButtonStyle="ButtonStyle.Dark"
                                  Variant="Variant.Text"
                                  Click="() => DeleteTeamAsync(team)" />

                </Template>
                <EditTemplate Context="team">
                    <RadzenButton Icon="add"
                                  ButtonStyle="ButtonStyle.Dark"
                                  Variant="Variant.Text"
                                  Click="() => AddOwnerAsync(team)" />
                    <RadzenButton Icon="save"
                                  ButtonStyle="ButtonStyle.Dark"
                                  Variant="Variant.Text"
                                  Disabled="team.TeamOwners.Any(to => to.Owner is null)"
                                  Click="() => SaveTeamAsync(team)" />
                    <RadzenButton ButtonStyle="ButtonStyle.Dark"
                                  Variant="Variant.Text"
                                  Icon="delete"
                                  Click="() => CancelAdd(team)" />
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenStack>

<RadzenRow AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Center" Visible="_isLoading">
    <RadzenProgressBarCircular Mode="ProgressBarMode.Indeterminate" ShowValue="false" Size="ProgressBarCircularSize.Large" />
</RadzenRow>

@code {
    [CascadingParameter(Name = "Club")]
    public int Club { get; set; }
    [CascadingParameter(Name = "Year")]
    public int Year { get; set; }

    private RadzenDataGrid<Team>? _teamsGrid;
    private IEnumerable<Owner> _allOwners = [];
    private IEnumerable<Team> _teams = [];
    private bool _isLoading = false;
    private bool _isExporting = false;

    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;

        await base.OnParametersSetAsync();

        await Task.Run(async () =>
        {
            _allOwners = await OwnerService.GetOwnersWithAllPigeonsAsync();
            _teams = await TeamsService.GetAllAsync();
        });

        _isLoading = false;
    }

    private IEnumerable<Owner> UnassignedOwners => _allOwners.ExceptBy(_teams.SelectMany(t => t.TeamOwners).Select(to => to.Owner?.Id), o => o.Id);

    private async Task AddOwnerAsync(Team team)
    {
        if (_teamsGrid is null)
            return;

        int position = team.TeamOwners.MaxBy(to => to.Position)?.Position + 1 ?? 0;
        team.TeamOwners.Add(new TeamOwner() { Owner = null, Points = 0, Position = position });
        await _teamsGrid.EditRow(team);
    }

    private async Task EditTeamAsync(Team team)
    {
        if (_teamsGrid is null)
            return;

        await _teamsGrid.EditRow(team);
    }

    private void AddTeam()
    {
        Team team = new()
        {
            Number = (_teams.MaxBy(t => t.Number)?.Number ?? 0) + 1,
            TeamOwners = [new TeamOwner { Owner = null, Points = 0, Position = 0, }],
        };

        _teamsGrid?.InsertRow(team);
    }

    private void CancelAdd(Team team)
    {
        _teamsGrid?.CancelEditRow(team);
    }

    private async Task DeleteTeamAsync(Team team)
    {
        _teams = _teams.Except([team]);
        await TeamsService.DeleteTeamAsync(team);
    }

    private async Task SaveTeamAsync(Team team)
    {
        if (_teamsGrid is null)
            return;

        await _teamsGrid.UpdateRow(team);

        await Task.Run(async () =>
        {
            await TeamsService.UpdateTeamAsync(team);
            _teams = await TeamsService.GetAllAsync();
        });
    }

    private async Task ExportAsync()
    {
        _isExporting = true;

        await TeamsService.ExportAsync(_teams);

        _isExporting = false;
    }
}
