@page "/pigeonswap"
@inject IOwnerService OwnerService
@inject IPigeonSwapService PigeonSwapService
@inject IRaceService RaceService

<RadzenStack AlignItems="AlignItems.Start" Orientation="Orientation.Vertical">
    <RadzenText TextStyle="TextStyle.DisplayH6">
        Duivenwissel
    </RadzenText>

    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenButton ButtonStyle="ButtonStyle.Primary"
                      Text="Koppel Toevoegen"
                      Icon="playlist_add"
                      Click="AddPigeonSwapPair" />

        <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                      Text="Exporteren naar PDF"
                      Icon="picture_as_pdf"
                      Click="ExportToPdf" />
    </RadzenStack>



    <RadzenDataGrid Data="_pigeonSwapPairs" EmptyText="Geen duivenwisselkoppels gevonden." @ref="_pigeonSwapGrid">
        <Columns>
            <RadzenDataGridColumn TItem="PigeonSwapPair" Title="Zetter">
                <Template>
                    <RadzenDropDown TValue="Owner"
                                    Data="_allOwners"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.Contains"
                                    AllowFiltering="true"
                                    @bind-Value="context.Player"
                                    Change="@(() => HandlePlayerChange(context))"
                                    Style="width: 100%">
                        <Template Context="possibleOwner">
                            @((possibleOwner as Owner)!.ID): @((possibleOwner as Owner)!.Name)
                        </Template>
                    </RadzenDropDown>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PigeonSwapPair" Title="Eigenaar">
                <Template>
                    <RadzenDropDown TValue="Owner"
                                    Data="_allOwners"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.Contains"
                                    AllowFiltering="true"
                                    @bind-Value="context.Owner"
                                    Style="width: 100%">
                        <Template Context="possibleOwner">
                            @((possibleOwner as Owner)!.ID): @((possibleOwner as Owner)!.Name)
                        </Template>
                    </RadzenDropDown>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PigeonSwapPair" Title="Duif">
                <Template>
                    <RadzenDropDown TValue="Pigeon"
                                    Data="SelectablePigeons(context.Owner)"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.Contains"
                                    AllowFiltering="true"
                                    @bind-Value="context.Pigeon"
                                    Change="@(() => HandlePigeonChange(context))"
                                    Style="width: 100%" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PigeonSwapPair" Title="Gekoppelde Liefhebber">
                <Template>
                    <RadzenDropDown TValue="Owner"
                                    Data="_allOwners"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.Contains"
                                    AllowFiltering="true"
                                    @bind-Value="context.CoupledPlayer"
                                    Change="@(() => HandleCoupledPlayerChange(context))"
                                    Style="width: 100%">
                        <Template Context="possibleOwner">
                            @((possibleOwner as Owner)!.ID): @((possibleOwner as Owner)!.Name)
                        </Template>
                    </RadzenDropDown>
                </Template>
            </RadzenDataGridColumn>
            @foreach (SimpleRace race in _races)
            {
                <RadzenDataGridColumn TItem="PigeonSwapPair" Title="@race.Name" Width="100px">
                    <Template>
                        @context.RacePoints?.FirstOrDefault(rp => rp.Key.Code == race.Code).Value
                    </Template>
                </RadzenDataGridColumn>
            }
            <RadzenDataGridColumn TItem="PigeonSwapPair" Title="Totaal" Property="Points" Width="100px" />
            <RadzenDataGridColumn TItem="PigeonSwapPair" Width="50px">
                <Template>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                  Icon="delete"
                                  Click="@(() => DeletePigeonSwapPair(context))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenStack>

@code {
    [CascadingParameter(Name = "Club")]
    public int Club { get; set; }
    [CascadingParameter(Name = "Year")]
    public int Year { get; set; }

    private RadzenDataGrid<PigeonSwapPair> _pigeonSwapGrid = null!;
    private IEnumerable<Owner> _allOwners = null!;
    private IEnumerable<PigeonSwapPair> _pigeonSwapPairs = null!;
    private IEnumerable<SimpleRace> _races = new List<SimpleRace>();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _allOwners = await OwnerService.GetOwnersByYearWithYoungPigeonsAsync(Year);
        _pigeonSwapPairs = await PigeonSwapService.GetPigeonSwapPairsByYearAsync(Year);
        _races = await RaceService.GetAllRacesByYearAndTypeAsync(Year, RaceType.L);

        foreach (PigeonSwapPair pigeonSwapPair in _pigeonSwapPairs)
            pigeonSwapPair.Owner!.Pigeons = _allOwners.First(o => o.ID == pigeonSwapPair.Owner.ID).Pigeons;
    }

    private IEnumerable<Pigeon> SelectablePigeons(Owner? owner)
    {
        if (owner is null)
            return new List<Pigeon>();

        return owner.Pigeons.OrderBy(p => p.Country)
            .ThenBy(p => p.Year)
            .ThenBy(p => p.RingNumber);
    }

    private async Task HandlePlayerChange(PigeonSwapPair pigeonSwapPair)
    {
        await PigeonSwapService.DeletePigeonSwapPairForYearAsync(Year, pigeonSwapPair);
        pigeonSwapPair.Owner = pigeonSwapPair.Player;
    }

    private async Task HandlePigeonChange(PigeonSwapPair pigeonSwapPair)
    {
        if (pigeonSwapPair.Pigeon is null || pigeonSwapPair.CoupledPlayer is null)
            return;

        await PigeonSwapService.UpdatePigeonSwapPairAsync(Year, pigeonSwapPair);
        _pigeonSwapPairs = await PigeonSwapService.GetPigeonSwapPairsByYearAsync(Year);
    }

    private async Task HandleCoupledPlayerChange(PigeonSwapPair pigeonSwapPair)
    {
        if (pigeonSwapPair.Pigeon is null || pigeonSwapPair.CoupledPlayer is null)
            return;

        await PigeonSwapService.UpdatePigeonSwapPairAsync(Year, pigeonSwapPair);
        _pigeonSwapPairs = await PigeonSwapService.GetPigeonSwapPairsByYearAsync(Year);
    }

    private async Task DeletePigeonSwapPair(PigeonSwapPair pigeonSwapPair)
    {
        await PigeonSwapService.DeletePigeonSwapPairForYearAsync(Year, pigeonSwapPair);
        _pigeonSwapPairs = _pigeonSwapPairs.Where(pair => pair != pigeonSwapPair);
    }

    private void AddPigeonSwapPair() => _pigeonSwapGrid.InsertRow(new PigeonSwapPair());

    private async Task ExportToPdf()
    {
        await PigeonSwapService.ExportToPdf(_pigeonSwapPairs);
    }
}
